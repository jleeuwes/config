#!/bin/bash

set -Eeu
set -o pipefail

set -o noclobber

CMD_GPG=gpg2
CMD_MKPASSWD=mkpasswd
CMD_HTPASSWD=htpasswd # from apache httpd
CMD_TR=tr # from coreutils

# Identity to sign with and to always encrypt for:
ME=jeroen@lwstn.eu

checkpath() {
	if ! type -P "$1" > /dev/null; then
	 	printf 'Ik vind commando %q niet in $PATH (%q).\n' "$1" "$PATH" >&2
		return 1
	fi
}

checkpath $CMD_GPG
checkpath $CMD_MKPASSWD
checkpath $CMD_HTPASSWD
checkpath $CMD_TR

main() {
	local command
	if test $# -eq 0; then
		command=""
	else
		command="$1"
		shift
	fi

	case "$command" in
	get-exact)
		# get-exact is a bit of a misnomer: it will not show the exact password
		# all it did was not append a newline
		printf '`%q get-exact` is deprecated; use `%q cat -n` instead.\n' "$0" "$0" >&2
		do_show plain -n -- "$@"
	;;
	show|cat)
		do_show plain "$@"
	;;
	hash)
		# output passwords in /etc/shadow-like format
		do_show hashed "$@"
	;;
	hash-with-bcrypt)
		do_show hashed_bcrypt "$@"
	;;
	add|new)
		file="$1"
		shift
		if [ -e "$file" ]; then
		  echo "Wachtwoord $file bestaat al." >&2
		  exit 1
		fi
		
		local recipients=(--recipient "$ME")
		for recipient in "$@"; do
			echo "Wachtwoord zal ook leesbaar zijn voor $recipient" >&2
			recipients+=(--recipient "$recipient")
		done
		
		local pass=""
		if tty -s; then
			# If terminal; ask for a one line password
			stty -echo
			read -r -p "Wachtwoord: " pass
			stty echo
		else
			# Otherwise, read full input
			pass=$(cat)
		fi
		if [ -z "$pass" ]; then
			echo "Geen wachtwoord gegeven." >&2
			exit 1
		fi
		local content
		# We don't redirect the command to $file directly so no empty file will be created on error
		content=$(printf "%s" "$pass" | $CMD_GPG --batch --use-agent --armor --encrypt --sign --local-user "$ME" "${recipients[@]}")
		printf "%s" "$content" > "$file"
		echo "Wachtwoord $file opgeslagen." >&2
	;;
	*)
		echo "Onbekend commando '$command'. Tot ziens!" >&2
		exit 1
	;;
	esac
}

do_show() {
	local method="$1"
	shift
	local success=0
	local seen=0
	local prefix=""
	local content
	local suppress_last_newline=no
	local format
	while [ $# -ge 1 ]; do
		case "$1" in
		-n)
			suppress_last_newline=yes
			shift
		;;
		--)
			shift
			break
		;;
		-*)
			echo "Unrecognized option: $1" >&2
			exit 1
		;;
		*)
			break
		;;
		esac
	done
	if [ $# -eq 0 ]; then
		echo "Reading from stdin..." >&2
		set -- -
	fi
	if [ $# -gt 1 ]; then
		format=multi
	else
		format=single
	fi
	for file in "$@"; do
		# We let gpg produce any errors for us and use && to make sure we continue with the other files in case of an error
		content=$($CMD_GPG --use-agent --batch --decrypt -- "$file") && {
			if [ $success -gt 0 ]; then
				# This approach gives a messy combination of stdout and stderr,
				# but it does make sure we never put empty lines on stdout.
				printf '\n'
			fi
			if [ $format = multi ]; then
				printf '%s:' "$file"
			fi
			show_"$method" "$content"
			let ++success # ++ first because of weird exit code if expression is 0
		}
	done
	if [ "$suppress_last_newline" = no -a $success -gt 0 ]; then
		printf '\n'
	fi
	if [ $success -lt $# ]; then
		exit 1
	fi
}

show_plain() {
	printf "%s" "$1"
}
show_hashed() {
	printf '%s' "$1" | $CMD_MKPASSWD --stdin --method=sha512crypt | $CMD_TR -d %'\n'
}
show_hashed_bcrypt() {
	# bcrypt is more robust against offline brute-forcing,
	# but does not seem to be supported for use in /etc/shadow
	printf '%s' "$1" | $CMD_HTPASSWD -niB username | cut -d: -f2 | $CMD_TR -d $'\n'
}

main "$@"
