#!/usr/bin/env bash

set -Eeu -o pipefail

determine_here() {
	(
		cd -- "$(dirname -- "$0")"
		pwd -P
	)
}
export KOMPUTILOJ_PATH=$(determine_here)
printf 'Using KOMPUTILOJ_PATH=%q\n' "$KOMPUTILOJ_PATH" >&2

# Determine the source we use as nixpkgs in nixos-rebuild etcetera:
DEFAULT_NIXOS=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A default_nixos | egrep -o '[^"]+')

main() {
	local cmd
	local cmdpath
	
	if [[ "$#" -eq 0 ]]; then
		printf 'Usage: %q COMMAND\n' "$0" >&2
		exit 1
	fi

	cmd="$1"
	shift
	case "$cmd" in
		update-sources)
			do_update_sources
		;;
		nixos-rebuild)
			do_nixos_rebuild "$@"
		;;
		deploy)
			do_deploy "$@"
		;;
		activate-apps)
			do_activate_apps "$@"
		;;
		update-domains)
			do_update_domains "$@"
		;;
		nixops)
			do_nixops "$@"
		;;
		cleanup)
			do_cleanup "$@"
		;;
		backup)
			do_backup "$@"
		;;
		*)
			cmdpath=commands."$cmd"
			export NIX_PATH=komputiloj="$KOMPUTILOJ_PATH"
			# The stupid attrset is a trick to prevent a multiple derivations to be built in case of a mistake in the nix files.
			# nix-build otherwise happily builds multiple derivations and we would execute an arbitrary one of them :-(
			nix-build -E '{ cmd }: { force-single-derivation = (builtins.getAttr cmd (import <komputiloj>).commands); }' \
				--argstr cmd "$cmd" \
				--out-link "$KOMPUTILOJ_PATH"/results/"$cmdpath"
			"$KOMPUTILOJ_PATH"/results/"$cmdpath" "$@"
		;;
	esac
}

do_update_sources() {
	for source_dir in "$KOMPUTILOJ_PATH"/sources.d/*; do
		if [[ -d "$source_dir" ]]; then
		(
			cd -- "$source_dir"
			if [[ -x update ]]; then
				printf 'Updating source %s\n' "$source_dir" >&2
				./update
			else
				printf 'Skipping source without update script: %s\n' "$source_dir" >&2
			fi
		)
		fi
	done
}

do_nixos_rebuild() {
	local nixpkgs_path

	printf 'Using nixpkgs source %q\n' "$DEFAULT_NIXOS" >&2
	nixpkgs_path=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A sources."$DEFAULT_NIXOS".nix_path | egrep -o '[^"]+')
	printf 'Using implicit current host configuration from /etc/nixos\n' >&2 # TODO just use a (host-specific) dir in KOMPUTILOJ_PATH directly
	export NIX_PATH="komputiloj=$KOMPUTILOJ_PATH:nixpkgs=$nixpkgs_path:nixos-config=/etc/nixos/configuration.nix"
	printf 'Using nixos-rebuild from PATH\n' >&2
	exec sudo -E nixos-rebuild "$@"
}

do_deploy() {
	do_nixops_something "$KOMPUTILOJ_PATH"/serviloj/deploy "$@"
	echo "TODO now activate-apps?" >&2
}

do_update_domains() {
	# TODO put domains in top-level default.nix
	# TODO make a proper package instead of this nix-shell hacking
	do_in_shell "capsules.komputiloj.packages.tipctl" bash "$KOMPUTILOJ_PATH"/_komputiloj-update-domains
}

do_in_shell() {
	local pkgs
	pkgs="$1"
	shift
	printf 'Using nixpkgs source %q\n' "$DEFAULT_NIXOS" >&2
	nixpkgs_path=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A sources."$DEFAULT_NIXOS".nix_path | egrep -o '[^"]+')
	export NIX_PATH="komputiloj=$KOMPUTILOJ_PATH:nixpkgs=$nixpkgs_path"
	local args_escaped=$(printf '%q ' "$@")
	nix-shell \
		-E 'with import <nixpkgs> {}; with import <komputiloj>; mkShell { buildInputs = [
			'"$pkgs"'
		]; }' \
		--run "$args_escaped"
}

do_nixops() {
	do_nixops_something "$KOMPUTILOJ_PATH"/serviloj/command "$@"
}

do_nixops_something() {
	local nixpkgs_path

	printf 'Using nixpkgs source %q\n' "$DEFAULT_NIXOS" >&2
	nixpkgs_path=$(nix-instantiate --eval "$KOMPUTILOJ_PATH" -A sources."$DEFAULT_NIXOS".nix_path | egrep -o '[^"]+')
	export NIX_PATH="komputiloj=$KOMPUTILOJ_PATH:nixpkgs=$nixpkgs_path"
	export NIXOPS_CMD=nixops
	export NIXOPS_STATE="$KOMPUTILOJ_PATH"/serviloj/state.nixops
	export NIXOPS_DEPLOYMENT=serviloj
	local args_escaped=$(printf '%q ' "$@")
	# TODO add nixops to gcroots to prevent rebuilding everytime
	# (best way to do this is probably to put shells in a capsule)
	nix-shell \
		-E 'with import <nixpkgs> {}; with import <komputiloj>; mkShell { buildInputs = [
			sources.nixops.value.default
			capsules.komputiloj.packages.wachtwoord
		]; }' \
		--run "$args_escaped"
}

do_activate_apps() {
	# TODO Take wachtwoord program from sources like in do_nixops_something.
	# TODO It's weird to reference serviloj here.
	export THEE_USER=jeroen
	export THEE_PASSWORD=$(wachtwoord cat -n \
		"$KOMPUTILOJ_PATH"/serviloj/secrets/jeroen@thee.radstand.nl)
	export NIX_PATH="komputiloj=$KOMPUTILOJ_PATH"
	nix-build --no-out-link . -A apps.thee.activate.pkg
	activate_cmd=$(nix-instantiate --eval . -A apps.thee.activate.cmd | egrep -o '[^"]+')
	"$activate_cmd"
}

do_cleanup() {
	local host

	if [[ "$#" -ne 1 ]]; then
		printf 'Usage: %q cleanup HOSTNAME\n' "$0" >&2
		return 1
	fi

	host="$1"
	if [[ "$host" = "$HOSTNAME" ]]; then
		echo "Doing local nix garbage collection..."
		sudo nix-collect-garbage
		echo
		echo "Garbage was collected. However,"
		echo "there might be lingering old system generations:"
		echo
		sudo nix-env -p /nix/var/nix/profiles/system --list-generations
		echo
		echo "To delete:"
		echo "    sudo nix-env -p /nix/var/nix/profiles/system --delete-generations NUMBER..."
		echo "    sudo nix-collect-garbage"
	else
	case "$host" in
		gently)
			# TODO study https://nixos.wiki/wiki/Storage_optimization
			# for an automated solution.
			ssh root@gently.radstand.nl nix-collect-garbage -d
		;;
		*)
			printf "Don't know how to clean up host %q.\n" "$host" >&2
			return 1
		;;
	esac
	fi
}

do_backup() {
	if [[ "$#" -ne 0 ]]; then
		printf 'Usage: %q backup\n' "$0" >&2
		return 1
	fi
	
	echo "FIRST: backup-storage"
	sudo -E "$KOMPUTILOJ_PATH"/bin/backup-storage
	echo
	echo "THEN: backup-bigstorage1"
	sudo -E "$KOMPUTILOJ_PATH"/bin/backup-bigstorage1
}

main "$@"
